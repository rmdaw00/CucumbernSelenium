BDD vs TDD
https://cucumber.io/blog/bdd/bdd-vs-tdd/

feature files -> Step definition file -> runner files

Example Mapping:
is Mapping user story with several examples that lead to identification of business rules
User Story -> Example -> Business Rules

this will result in "feature files"

Feature files
written in Gherkin Domain specific language Gherkin DSL
Feature: Menu Management
  Scenario: Add a menu item
    Given   …    #condition
    When    …    #action
    Then    …    #result

you will notice that step definition file that variables in feature files are converted into parameters of the methods
these variables are called cucumber variables

whenever running a definition file and it encounters a pending exception, it stops running that entire files

the @CucumberOptions is depreciated so if you want to use cucumber with JUnit5 use
  @Suite
  @SelectClasspathResource("com/rmdaw/cucumber/features")
  //@ConfigurationParameter(key = GLUE_PROPERTY_NAME, value = "com.rmdaw.cucumber")
  //@ConfigurationParameter(key = PLUGIN_PROPERTY_NAME, value = "pretty")

you can save the configurations in junit-platform.properties
  cucumber.publish.quiet=true
  cucumber.plugin=pretty,...
  cucumber.glue=com.rmdaw.cucumber,...

________________________________________________


@Given("I have a menu item with name {string} and price {int}")
to
@Given("I have a menu item with name {string} and price ([1-9]+)")
the () is called capture group

IMPORTANT to use regexp in stepdefinitions wrap the string inside given/when/Then
  with "/ ___ /"   or "^ _____ $"

inside is REGULAR Expression,
SUMMARY OF REGULAR EXPRESSIONS
+ is a Quantifier
  +   1-*
  *   0-*
  ?   0-1
  {x} x=exact quantity

  ^   anything but e.g. [^Z]  Zebra=false, zebra=true, bra=true

@Given("I have a menu item with name {string} and price ([\\d]+)")
  \d    d: single digit 0-9
  \w    single word char: a-Z 0-9 _
  \s    whitespace char: ' ', tabs, endofline

@Given("I have a menu item with name \"([^\"])\" and price ([\\d]+)")
\"([^\"]+)\"  is  "([^"])+"  which is anything but " 1-*
________________________________________________

Tags help filter tests
mvn test -Dgroups="SmokeTest,NightlyBuildTest"
or
mvn verify -Dgroups="SmokeTest,NightlyBuildTest"
________________________________________________
Background runs before every scenario, its like beforeach but actually documented and shown to everyone
Note how each scenario has a new RestaurantMenu object, showing how scenarios behave like JUnit tests
each are independent and have fresh copy of parent object and new memory

Note in Spring here that scenarios behave like JUnit test, they are ran independent though they all
   rely on the spring context that has a state, LocalDB is in memory DB that is persisted
   throughout the scenario because its tied to spring application context, while justCount
   is not thus each scenario sees a new justCount. meaning different objects of addingEventSteps
   were used to test each scenario differently
________________________________________________

Hooks @Before @After behave like in JUnit setup teardown, it applies to the entire scenario
its useful for clearing cache or terminating connections
use feature background whenever other non dev team members need to know about it
________________________________________________
